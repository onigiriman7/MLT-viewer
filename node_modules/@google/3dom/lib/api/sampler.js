/* @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A constructor factory for a Sampler class. The Sampler is defined based on
 * a provided implementation for all specified 3DOM scene graph element types.
 *
 * The sole reason for using this factory pattern is to enable sound type
 * checking while also providing for the ability to stringify the factory so
 * that it can be part of a runtime-generated Worker script.
 *
 * @see ../api.ts
 */
export function defineSampler(ThreeDOMElement) {
    var _a, _b;
    const $kernel = Symbol('kernel');
    const $minFilter = Symbol('minFilter');
    const $magFilter = Symbol('magFilter');
    const $wrapS = Symbol('wrapS');
    const $wrapT = Symbol('wrapT');
    const $name = Symbol('name');
    class Sampler extends ThreeDOMElement {
        constructor(kernel, serialized) {
            super(kernel);
            this[_a] = null;
            this[_b] = null;
            this[$kernel] = kernel;
            this[$name] = serialized.name;
            this[$minFilter] = serialized.minFilter || null;
            this[$magFilter] = serialized.magFilter || null;
            this[$wrapS] = serialized.wrapS || 10497;
            this[$wrapT] = serialized.wrapT || 10497;
        }
        get name() {
            return this[$name];
        }
        get minFilter() {
            return this[$minFilter];
        }
        get magFilter() {
            return this[$magFilter];
        }
        get wrapS() {
            return this[$wrapS];
        }
        get wrapT() {
            return this[$wrapT];
        }
        async setMinFilter(filter) {
            await this[$kernel].mutate(this, 'minFilter', filter);
            this[$minFilter] = filter;
        }
        async setMagFilter(filter) {
            await this[$kernel].mutate(this, 'magFilter', filter);
            this[$magFilter] = filter;
        }
        async setWrapS(mode) {
            await this[$kernel].mutate(this, 'wrapS', mode);
            this[$wrapS] = mode;
        }
        async setWrapT(mode) {
            await this[$kernel].mutate(this, 'wrapT', mode);
            this[$wrapT] = mode;
        }
    }
    _a = $minFilter, _b = $magFilter;
    return Sampler;
}
//# sourceMappingURL=sampler.js.map