{"version":3,"file":"texture.js","sourceRoot":"","sources":["../../src/api/texture.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAUH;;;;;;;;;;GAUG;AACH,MAAM,UAAU,aAAa,CAAC,eAA6C;;IAEzE,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACjC,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACjC,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;IACnC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;IAE7B,MAAM,OAAQ,SAAQ,eAAe;QAQnC,YAAY,MAAmB,EAAE,UAA6B;YAC5D,KAAK,CAAC,MAAM,CAAC,CAAC;YANT,QAAS,GAAe,IAAI,CAAC;YAC7B,QAAU,GAAiB,IAAI,CAAC;YAOrC,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;YAEvB,MAAM,EAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAC,GAAG,UAAU,CAAC;YAE3C,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YAEnB,IAAI,OAAO,IAAI,IAAI,EAAE;gBACnB,IAAI,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;aACzD;YAED,IAAI,MAAM,IAAI,IAAI,EAAE;gBAClB,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;aACrD;QACH,CAAC;QAED,IAAI,IAAI;YACN,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QAED,IAAI,OAAO;YACT,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC;QAED,IAAI,MAAM;YACR,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC;QAED,KAAK,CAAC,UAAU,CAAC,OAAqB;YACpC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YACrD,IAAI,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;QAC3B,CAAC;QAED,KAAK,CAAC,SAAS,CAAC,KAAiB;YAC/B,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YAClD,IAAI,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC;QACxB,CAAC;KACF;SA5CS,OAAO,OACP,QAAQ;IA6ClB,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, Image, Sampler, Texture as TextureInterface, ThreeDOMElement} from '../api.js';\nimport {SerializedTexture} from '../protocol.js';\n\nimport {ModelKernel} from './model-kernel.js';\n\nexport type TextureConstructor = Constructor<TextureInterface>&\n    ConstructedWithArguments<[ModelKernel, SerializedTexture]>;\n\n/**\n * A constructor factory for a Texture class. The Texture is defined\n * based on a provided implementation for all specified 3DOM scene graph element\n * types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function defineTexture(ThreeDOMElement: Constructor<ThreeDOMElement>):\n    TextureConstructor {\n  const $kernel = Symbol('kernel');\n  const $source = Symbol('source');\n  const $sampler = Symbol('sampler');\n  const $name = Symbol('name');\n\n  class Texture extends ThreeDOMElement implements TextureInterface {\n    private[$kernel]: ModelKernel;\n\n    private[$source]: Image|null = null;\n    private[$sampler]: Sampler|null = null;\n\n    private[$name]?: string;\n\n    constructor(kernel: ModelKernel, serialized: SerializedTexture) {\n      super(kernel);\n\n      this[$kernel] = kernel;\n\n      const {sampler, source, name} = serialized;\n\n      this[$name] = name;\n\n      if (sampler != null) {\n        this[$sampler] = kernel.deserialize('sampler', sampler);\n      }\n\n      if (source != null) {\n        this[$source] = kernel.deserialize('image', source);\n      }\n    }\n\n    get name() {\n      return this[$name];\n    }\n\n    get sampler() {\n      return this[$sampler];\n    }\n\n    get source() {\n      return this[$source];\n    }\n\n    async setSampler(sampler: Sampler|null): Promise<void> {\n      await this[$kernel].mutate(this, 'sampler', sampler);\n      this[$sampler] = sampler;\n    }\n\n    async setSource(image: Image|null): Promise<void> {\n      await this[$kernel].mutate(this, 'source', image);\n      this[$source] = image;\n    }\n  }\n\n  return Texture;\n}\n"]}