{"version":3,"file":"image.js","sourceRoot":"","sources":["../../src/api/image.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAUH;;;;;;;;;GASG;AACH,MAAM,UAAU,WAAW,CAAC,eAA6C;IAEvE,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACjC,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3B,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;IAE7B,MAAM,KAAM,SAAQ,eAAe;QAOjC,YAAY,MAAmB,EAAE,UAA2B;YAC1D,KAAK,CAAC,MAAM,CAAC,CAAC;YAEd,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;YAEvB,IAAI,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,GAAG,IAAI,IAAI,CAAC;YACpC,IAAI,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC;QAChC,CAAC;QAED,IAAI,IAAI;YACN,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QAED,IAAI,IAAI;YACN,OAAO,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;QACpD,CAAC;QAED,IAAI,GAAG;YACL,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;QAED,KAAK,CAAC,MAAM,CAAC,GAAgB;YAC3B,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;QACzC,CAAC;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, Image as ImageInterface, ThreeDOMElement} from '../api.js';\nimport {SerializedImage} from '../protocol.js';\n\nimport {ModelKernel} from './model-kernel.js';\n\nexport type ImageConstructor = Constructor<ImageInterface>&\n    ConstructedWithArguments<[ModelKernel, SerializedImage]>;\n\n/**\n * A constructor factory for a Image class. The Image is defined based on\n * a provided implementation for all specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function defineImage(ThreeDOMElement: Constructor<ThreeDOMElement>):\n    ImageConstructor {\n  const $kernel = Symbol('kernel');\n  const $uri = Symbol('uri');\n  const $name = Symbol('name');\n\n  class Image extends ThreeDOMElement implements ImageInterface {\n    private[$kernel]: ModelKernel;\n\n    private[$uri]: string|null;\n\n    private[$name]?: string;\n\n    constructor(kernel: ModelKernel, serialized: SerializedImage) {\n      super(kernel);\n\n      this[$kernel] = kernel;\n\n      this[$uri] = serialized.uri || null;\n      this[$name] = serialized.name;\n    }\n\n    get name() {\n      return this[$name];\n    }\n\n    get type() {\n      return this.uri != null ? 'external' : 'embedded';\n    }\n\n    get uri() {\n      return this[$uri];\n    }\n\n    async setURI(uri: string|null): Promise<void> {\n      this[$kernel].mutate(this, 'uri', uri);\n    }\n  }\n\n  return Image;\n}\n"]}