{"version":3,"file":"sampler.js","sourceRoot":"","sources":["../../src/api/sampler.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAWH;;;;;;;;;GASG;AACH,MAAM,UAAU,aAAa,CAAC,eAA6C;;IAEzE,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACjC,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;IACvC,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;IACvC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IAC/B,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;IAE7B,MAAM,OAAQ,SAAQ,eAAe;QAWnC,YAAY,MAAmB,EAAE,UAA6B;YAC5D,KAAK,CAAC,MAAM,CAAC,CAAC;YATT,QAAY,GAAmB,IAAI,CAAC;YACpC,QAAY,GAAmB,IAAI,CAAC;YAUzC,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;YAEvB,IAAI,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC;YAE9B,IAAI,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC;YAChD,IAAI,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC,SAAS,IAAI,IAAI,CAAC;YAChD,IAAI,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,KAAK,IAAI,KAAK,CAAC;YACzC,IAAI,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,KAAK,IAAI,KAAK,CAAC;QAC3C,CAAC;QAED,IAAI,IAAI;YACN,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QAED,IAAI,SAAS;YACX,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1B,CAAC;QAED,IAAI,SAAS;YACX,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC;QAC1B,CAAC;QAED,IAAI,KAAK;YACP,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC;QAED,IAAI,KAAK;YACP,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,MAAsB;YACvC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;YACtD,IAAI,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;QAC5B,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,MAAsB;YACvC,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;YACtD,IAAI,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;QAC5B,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,IAAc;YAC3B,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;QACtB,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,IAAc;YAC3B,MAAM,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;QACtB,CAAC;KACF;SA5DS,UAAU,OACV,UAAU;IA6DpB,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, Sampler as SamplerInterface, ThreeDOMElement} from '../api.js';\nimport {MagFilter, MinFilter, WrapMode} from '../gltf-2.0.js';\nimport {SerializedSampler} from '../protocol.js';\n\nimport {ModelKernel} from './model-kernel.js';\n\nexport type SamplerConstructor = Constructor<SamplerInterface>&\n    ConstructedWithArguments<[ModelKernel, SerializedSampler]>;\n\n/**\n * A constructor factory for a Sampler class. The Sampler is defined based on\n * a provided implementation for all specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function defineSampler(ThreeDOMElement: Constructor<ThreeDOMElement>):\n    SamplerConstructor {\n  const $kernel = Symbol('kernel');\n  const $minFilter = Symbol('minFilter');\n  const $magFilter = Symbol('magFilter');\n  const $wrapS = Symbol('wrapS');\n  const $wrapT = Symbol('wrapT');\n  const $name = Symbol('name');\n\n  class Sampler extends ThreeDOMElement implements SamplerInterface {\n    private[$kernel]: ModelKernel;\n\n    private[$minFilter]: MinFilter|null = null;\n    private[$magFilter]: MagFilter|null = null;\n\n    private[$wrapS]: WrapMode;\n    private[$wrapT]: WrapMode;\n\n    private[$name]?: string;\n\n    constructor(kernel: ModelKernel, serialized: SerializedSampler) {\n      super(kernel);\n\n      this[$kernel] = kernel;\n\n      this[$name] = serialized.name;\n\n      this[$minFilter] = serialized.minFilter || null;\n      this[$magFilter] = serialized.magFilter || null;\n      this[$wrapS] = serialized.wrapS || 10497;\n      this[$wrapT] = serialized.wrapT || 10497;\n    }\n\n    get name() {\n      return this[$name];\n    }\n\n    get minFilter() {\n      return this[$minFilter];\n    }\n\n    get magFilter() {\n      return this[$magFilter];\n    }\n\n    get wrapS() {\n      return this[$wrapS];\n    }\n\n    get wrapT() {\n      return this[$wrapT];\n    }\n\n    async setMinFilter(filter: MinFilter|null): Promise<void> {\n      await this[$kernel].mutate(this, 'minFilter', filter);\n      this[$minFilter] = filter;\n    }\n\n    async setMagFilter(filter: MagFilter|null): Promise<void> {\n      await this[$kernel].mutate(this, 'magFilter', filter);\n      this[$magFilter] = filter;\n    }\n\n    async setWrapS(mode: WrapMode): Promise<void> {\n      await this[$kernel].mutate(this, 'wrapS', mode);\n      this[$wrapS] = mode;\n    }\n\n    async setWrapT(mode: WrapMode): Promise<void> {\n      await this[$kernel].mutate(this, 'wrapT', mode);\n      this[$wrapT] = mode;\n    }\n  }\n\n  return Sampler;\n}\n"]}