{"version":3,"file":"material.js","sourceRoot":"","sources":["../../src/api/material.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AASH;;;;;;;;;GASG;AACH,MAAM,UAAU,cAAc,CAAC,eAA6C;;IAE1E,MAAM,qBAAqB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;IAC7D,MAAM,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;IAC/C,MAAM,iBAAiB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;IACrD,MAAM,gBAAgB,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAEnD,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACjC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;IAE7B;;;;OAIG;IACH,MAAM,QAAS,SAAQ,eAAe;QASpC,YAAY,MAAmB,EAAE,UAA8B;YAC7D,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;YARnB,QAAgB,GAAqB,IAAI,CAAC;YAC1C,QAAmB,GAAqB,IAAI,CAAC;YAC7C,QAAkB,GAAqB,IAAI,CAAC;YAQnD,IAAI,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;YAEvB,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,EAAE;gBAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC;aAC/B;YAED,MAAM,EACJ,oBAAoB,EACpB,aAAa,EACb,gBAAgB,EAChB,eAAe,EAChB,GAAG,UAAU,CAAC;YAEf,IAAI,CAAC,qBAAqB,CAAC;gBACvB,MAAM,CAAC,WAAW,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC;YAEvE,IAAI,aAAa,IAAI,IAAI,EAAE;gBACzB,IAAI,CAAC,cAAc,CAAC;oBAChB,MAAM,CAAC,WAAW,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;aACvD;YAED,IAAI,gBAAgB,IAAI,IAAI,EAAE;gBAC5B,IAAI,CAAC,iBAAiB,CAAC;oBACnB,MAAM,CAAC,WAAW,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;aAC1D;YAED,IAAI,eAAe,IAAI,IAAI,EAAE;gBAC3B,IAAI,CAAC,gBAAgB,CAAC;oBAClB,MAAM,CAAC,WAAW,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;aACzD;QACH,CAAC;QAED;;WAEG;QACH,IAAI,oBAAoB;YACtB,OAAO,IAAI,CAAC,qBAAqB,CAAC,CAAC;QACrC,CAAC;QAED,IAAI,aAAa;YACf,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9B,CAAC;QAED,IAAI,gBAAgB;YAClB,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACjC,CAAC;QACD,IAAI,eAAe;YACjB,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAChC,CAAC;QAED;;;WAGG;QACH,IAAI,IAAI;YACN,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;KACF;SAnEW,cAAc,OACd,iBAAiB,OACjB,gBAAgB;IAmE5B,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConstructedWithArguments, Constructor, Material as MaterialInterface, PBRMetallicRoughness, TextureInfo, ThreeDOMElement} from '../api.js';\nimport {SerializedMaterial} from '../protocol.js';\n\nimport {ModelKernel} from './model-kernel.js';\n\nexport type MaterialConstructor = Constructor<MaterialInterface>&\n    ConstructedWithArguments<[ModelKernel, SerializedMaterial]>;\n/**\n * A constructor factory for a Material class. The Material is defined based on\n * a provided implementation for all specified 3DOM scene graph element types.\n *\n * The sole reason for using this factory pattern is to enable sound type\n * checking while also providing for the ability to stringify the factory so\n * that it can be part of a runtime-generated Worker script.\n *\n * @see ../api.ts\n */\nexport function defineMaterial(ThreeDOMElement: Constructor<ThreeDOMElement>):\n    MaterialConstructor {\n  const $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\n  const $normalTexture = Symbol('normalTexture');\n  const $occlusionTexture = Symbol('occlusionTexture');\n  const $emissiveTexture = Symbol('emissiveTexture');\n\n  const $kernel = Symbol('kernel');\n  const $name = Symbol('name');\n\n  /**\n   * A Material represents a live material in the backing scene graph. Its\n   * primary purpose is to give the user write access to discrete properties\n   * (for example, the base color factor) of the backing material.\n   */\n  class Material extends ThreeDOMElement implements MaterialInterface {\n    protected[$pbrMetallicRoughness]: PBRMetallicRoughness;\n    protected[$normalTexture]: TextureInfo|null = null;\n    protected[$occlusionTexture]: TextureInfo|null = null;\n    protected[$emissiveTexture]: TextureInfo|null = null;\n\n    protected[$kernel]: ModelKernel;\n    protected[$name]: string;\n\n    constructor(kernel: ModelKernel, serialized: SerializedMaterial) {\n      super(kernel, serialized);\n\n      this[$kernel] = kernel;\n\n      if (serialized.name != null) {\n        this[$name] = serialized.name;\n      }\n\n      const {\n        pbrMetallicRoughness,\n        normalTexture,\n        occlusionTexture,\n        emissiveTexture\n      } = serialized;\n\n      this[$pbrMetallicRoughness] =\n          kernel.deserialize('pbr-metallic-roughness', pbrMetallicRoughness);\n\n      if (normalTexture != null) {\n        this[$normalTexture] =\n            kernel.deserialize('texture-info', normalTexture);\n      }\n\n      if (occlusionTexture != null) {\n        this[$occlusionTexture] =\n            kernel.deserialize('texture-info', occlusionTexture);\n      }\n\n      if (emissiveTexture != null) {\n        this[$emissiveTexture] =\n            kernel.deserialize('texture-info', emissiveTexture);\n      }\n    }\n\n    /**\n     * The PBR properties that are assigned to this material, if any.\n     */\n    get pbrMetallicRoughness() {\n      return this[$pbrMetallicRoughness];\n    }\n\n    get normalTexture() {\n      return this[$normalTexture];\n    }\n\n    get occlusionTexture() {\n      return this[$occlusionTexture];\n    }\n    get emissiveTexture() {\n      return this[$emissiveTexture];\n    }\n\n    /**\n     * The name of the material. Note that names are optional and not\n     * guaranteed to be unique.\n     */\n    get name() {\n      return this[$name];\n    }\n  }\n\n  return Material;\n}\n"]}