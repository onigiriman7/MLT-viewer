/* eslint-disable @typescript-eslint/no-explicit-any */
import { ACESFilmicToneMapping, PerspectiveCamera, PMREMGenerator, Scene, sRGBEncoding, UnsignedByteType, WebGLRenderer } from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';
import { RoughnessMipmapper } from 'three/examples/jsm/utils/RoughnessMipmapper.js';
import { ThreeDOMExecutionContext } from './context.js';
import { CorrelatedSceneGraph } from './facade/three-js/correlated-scene-graph.js';
import { ModelGraft } from './facade/three-js/model-graft.js';
class ThreeDOMDemo {
    constructor() {
        this.container = document.querySelector('#container');
        this.camera = new PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.25, 20);
        this.scene = new Scene();
        this.renderer = new WebGLRenderer({ antialias: true });
        this.pmremGenerator = new PMREMGenerator(this.renderer);
        this.controls = new OrbitControls(this.camera, this.renderer.domElement);
        this.textureLoader = new RGBELoader();
        this.gltfLoader = new GLTFLoader();
        this.camera.position.set(-1.8, 0.6, 2.7);
        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setSize(window.innerWidth, window.innerHeight);
        this.renderer.toneMapping = ACESFilmicToneMapping;
        this.renderer.toneMappingExposure = 0.8;
        this.renderer.outputEncoding = sRGBEncoding;
        this.container.appendChild(this.renderer.domElement);
        this.pmremGenerator.compileEquirectangularShader();
        this.controls.minDistance = 2;
        this.controls.maxDistance = 10;
        this.controls.target.set(0, 1, 0);
        this.controls.update();
        this.textureLoader.setDataType(UnsignedByteType)
            .setPath('../shared-assets/environments/')
            .load('lightroom_14b.hdr', (environmentTexture) => {
            const environmentMap = this.pmremGenerator.fromEquirectangular(environmentTexture)
                .texture;
            this.scene.environment = environmentMap;
            environmentTexture.dispose();
            this.pmremGenerator.dispose();
        });
        this.gltfLoader.setPath('../shared-assets/models/');
        this.gltfLoader.load('Astronaut.glb', (gltf) => {
            const roughnessMipmapper = new RoughnessMipmapper(this.renderer);
            gltf.scene.traverse((child) => {
                if (child.isMesh && child.material &&
                    child.material.isMaterial) {
                    roughnessMipmapper.generateMipmaps(child.material);
                }
            });
            roughnessMipmapper.dispose();
            this.scene.add(gltf.scene);
            this.activate3DOM(gltf);
        });
        window.addEventListener('resize', () => this.updateSize(), false);
        this.render();
    }
    updateSize() {
        this.camera.aspect = window.innerWidth / window.innerHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, window.innerHeight);
    }
    render() {
        this.renderer.render(this.scene, this.camera);
        requestAnimationFrame(() => {
            this.render();
        });
    }
    activate3DOM(gltf) {
        const script = document.querySelector('script[type="3DOM"]');
        const scriptText = script.textContent;
        const context = new ThreeDOMExecutionContext(['material-properties', 'messaging']);
        const graft = new ModelGraft('../shared-assets/models/Astronaut.glb', CorrelatedSceneGraph.from(gltf));
        context.eval(scriptText);
        context.changeModel(graft);
        document.querySelector('#ui').addEventListener('click', (event) => {
            const colorString = event.target.dataset.color;
            if (!colorString) {
                return;
            }
            const color = colorString.split(',').map((numberString) => parseFloat(numberString));
            // Forward interaction details to the <model-viewer> worklet:
            context.worker.postMessage({ action: 'change-color', payload: color });
        });
        const dropZone = document.querySelector('#base-color .dropzone');
        const dropInputElement = document.querySelector('#base-color .input');
        const dropPreview = document.querySelector('#base-color .preview');
        const dropControl = new self
            .SimpleDropzone.SimpleDropzone(dropZone, dropInputElement);
        dropControl.on('drop', ({ files }) => {
            let url = '';
            for (const file of files.values()) {
                url = URL.createObjectURL(file);
                dropPreview.style.backgroundImage = `url(${url})`;
                break;
            }
            context.worker.postMessage({ action: 'change-texture', payload: url });
        });
    }
}
self.demo = new ThreeDOMDemo();
//# sourceMappingURL=demo.js.map