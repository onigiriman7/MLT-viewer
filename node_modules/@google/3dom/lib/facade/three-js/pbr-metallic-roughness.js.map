{"version":3,"file":"pbr-metallic-roughness.js","sourceRoot":"","sources":["../../../src/facade/three-js/pbr-metallic-roughness.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;AAUH,OAAO,EAAC,WAAW,EAAC,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAC,kBAAkB,EAAE,aAAa,EAAE,eAAe,EAAC,MAAM,wBAAwB,CAAC;AAE1F,MAAM,eAAe,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AACjD,MAAM,iBAAiB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;AACrD,MAAM,yBAAyB,GAAG,MAAM,CAAC,0BAA0B,CAAC,CAAC;AAErE;;GAEG;AACH,MAAM,OAAO,oBAAqB,SAAQ,eAAe;IASvD,YACI,KAAiB,EAAE,oBAA8C,EACjE,mBAA8C;QAChD,KAAK,CAAC,KAAK,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,CAAC;QAVnD,QAAmB,GAAqB,IAAI,CAAC;QAC7C,QAA2B,GAAqB,IAAI,CAAC;QAW1D,MAAM,EAAC,gBAAgB,EAAE,wBAAwB,EAAC,GAAG,oBAAoB,CAAC;QAC1E,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAgB,CAAC;QAClD,MAAM,yBAAyB,GAAG,IAAI,GAAG,EAAgB,CAAC;QAE1D,KAAK,MAAM,QAAQ,IAAI,mBAAmB,EAAE;YAC1C,IAAI,gBAAgB,IAAI,IAAI,IAAI,QAAQ,CAAC,GAAG,IAAI,IAAI,EAAE;gBACpD,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aACrC;YAED,+DAA+D;YAC/D,4BAA4B;YAC5B,sIAAsI;YACtI,IAAI,wBAAwB,IAAI,IAAI,IAAI,QAAQ,CAAC,YAAY,IAAI,IAAI,EAAE;gBACrE,yBAAyB,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;aACtD;SACF;QAED,IAAI,iBAAiB,CAAC,IAAI,GAAG,CAAC,EAAE;YAC9B,IAAI,CAAC,iBAAiB,CAAC;gBACnB,IAAI,WAAW,CAAC,KAAK,EAAE,gBAAiB,EAAE,iBAAiB,CAAC,CAAC;SAClE;QAED,IAAI,yBAAyB,CAAC,IAAI,GAAG,CAAC,EAAE;YACtC,IAAI,CAAC,yBAAyB,CAAC,GAAG,IAAI,WAAW,CAC7C,KAAK,EAAE,wBAAyB,EAAE,yBAAyB,CAAC,CAAC;SAClE;IACH,CAAC;IAnCD,IAAW,OAHH,iBAAiB,OACjB,yBAAyB,EAErB,eAAe,EAAC;QAC1B,OAAO,IAAI,CAAC,kBAAkB,CAA8B,CAAC;IAC/D,CAAC;IAoCD,IAAI,eAAe;QACjB,OAAQ,IAAI,CAAC,YAAqC,CAAC,eAAe;YAC9D,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnB,CAAC;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACjC,CAAC;IAED,IAAI,wBAAwB;QAC1B,OAAO,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,QAA2B,EAAE,KAAW;QACnD,IAAI,QAAQ,KAAK,iBAAiB,EAAE;YAClC,MAAM,IAAI,KAAK,CAAC,iBAAiB,QAAQ,0BAA0B,CAAC,CAAC;SACtE;QAED,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE;YAC5C,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAChC,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAE5B,MAAM,oBAAoB,GACtB,IAAI,CAAC,aAAa,CAA6B,CAAC;YAEpD,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;gBAClD,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;gBAClB,OAAO,oBAAoB,CAAC,eAAe,CAAC;aAC7C;iBAAM;gBACL,oBAAoB,CAAC,eAAe,GAAG,KAAK,CAAC;aAC9C;SACF;IACH,CAAC;IAED,MAAM;QACJ,MAAM,UAAU,GAA4C,KAAK,CAAC,MAAM,EAAE,CAAC;QAC3E,MAAM,EAAC,gBAAgB,EAAE,eAAe,EAAC,GAAG,IAAI,CAAC;QAEjD,IAAI,gBAAgB,IAAI,IAAI,EAAE;YAC5B,UAAU,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC;SACzD;QAED,IAAI,eAAe,IAAI,IAAI,EAAE;YAC3B,UAAU,CAAC,eAAe,GAAG,eAAe,CAAC;SAC9C;QAED,OAAO,UAA4C,CAAC;IACtD,CAAC;CACF","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MeshStandardMaterial, Texture as ThreeTexture} from 'three';\n\nimport {RGBA} from '../../api.js';\nimport {PBRMetallicRoughness as GLTFPBRMetallicRoughness} from '../../gltf-2.0.js';\nimport {SerializedPBRMetallicRoughness} from '../../protocol.js';\nimport {PBRMetallicRoughness as PBRMetallicRoughnessInterface} from '../api.js';\n\nimport {ModelGraft} from './model-graft.js';\nimport {TextureInfo} from './texture-info.js';\nimport {$correlatedObjects, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement implements\n    PBRMetallicRoughnessInterface {\n  private[$baseColorTexture]: TextureInfo|null = null;\n  private[$metallicRoughnessTexture]: TextureInfo|null = null;\n\n  private get[$threeMaterials](): Set<MeshStandardMaterial> {\n    return this[$correlatedObjects] as Set<MeshStandardMaterial>;\n  }\n\n  constructor(\n      graft: ModelGraft, pbrMetallicRoughness: GLTFPBRMetallicRoughness,\n      correlatedMaterials: Set<MeshStandardMaterial>) {\n    super(graft, pbrMetallicRoughness, correlatedMaterials);\n\n    const {baseColorTexture, metallicRoughnessTexture} = pbrMetallicRoughness;\n    const baseColorTextures = new Set<ThreeTexture>();\n    const metallicRoughnessTextures = new Set<ThreeTexture>();\n\n    for (const material of correlatedMaterials) {\n      if (baseColorTexture != null && material.map != null) {\n        baseColorTextures.add(material.map);\n      }\n\n      // NOTE: GLTFLoader users the same texture for metalnessMap and\n      // roughnessMap in this case\n      // @see https://github.com/mrdoob/three.js/blob/b4473c25816df4a09405c7d887d5c418ef47ee76/examples/js/loaders/GLTFLoader.js#L2173-L2174\n      if (metallicRoughnessTexture != null && material.metalnessMap != null) {\n        metallicRoughnessTextures.add(material.metalnessMap);\n      }\n    }\n\n    if (baseColorTextures.size > 0) {\n      this[$baseColorTexture] =\n          new TextureInfo(graft, baseColorTexture!, baseColorTextures);\n    }\n\n    if (metallicRoughnessTextures.size > 0) {\n      this[$metallicRoughnessTexture] = new TextureInfo(\n          graft, metallicRoughnessTexture!, metallicRoughnessTextures);\n    }\n  }\n\n\n  get baseColorFactor(): RGBA {\n    return (this.sourceObject as PBRMetallicRoughness).baseColorFactor ||\n        [1, 1, 1, 1];\n  }\n\n  get baseColorTexture() {\n    return this[$baseColorTexture];\n  }\n\n  get metallicRoughnessTexture() {\n    return this[$metallicRoughnessTexture];\n  }\n\n  async mutate(property: 'baseColorFactor', value: RGBA): Promise<void> {\n    if (property !== 'baseColorFactor') {\n      throw new Error(`Cannot mutate ${property} on PBRMetallicRoughness`);\n    }\n\n    for (const material of this[$threeMaterials]) {\n      material.color.fromArray(value);\n      material.opacity = value[3];\n\n      const pbrMetallicRoughness =\n          this[$sourceObject] as GLTFPBRMetallicRoughness;\n\n      if (value[0] === 1 && value[1] === 1 && value[2] === 1 &&\n          value[3] === 1) {\n        delete pbrMetallicRoughness.baseColorFactor;\n      } else {\n        pbrMetallicRoughness.baseColorFactor = value;\n      }\n    }\n  }\n\n  toJSON(): SerializedPBRMetallicRoughness {\n    const serialized: Partial<SerializedPBRMetallicRoughness> = super.toJSON();\n    const {baseColorTexture, baseColorFactor} = this;\n\n    if (baseColorTexture != null) {\n      serialized.baseColorTexture = baseColorTexture.toJSON();\n    }\n\n    if (baseColorFactor != null) {\n      serialized.baseColorFactor = baseColorFactor;\n    }\n\n    return serialized as SerializedPBRMetallicRoughness;\n  }\n}\n"]}