{"version":3,"file":"image.js","sourceRoot":"","sources":["../../../src/facade/three-js/image.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;AAEH,OAAO,EAAC,WAAW,EAA0B,MAAM,OAAO,CAAC;AAO3D,OAAO,EAAC,kBAAkB,EAAE,eAAe,EAAC,MAAM,wBAAwB,CAAC;AAE3E,MAAM,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;AAEjC,MAAM,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAC/C,MAAM,iBAAiB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAErD;;GAEG;AACH,MAAM,OAAO,KAAM,SAAQ,eAAe;IAOxC,YACI,KAAiB,EAAE,KAAgB,EACnC,kBAAqC;QACvC,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAAC;QALnC,QAAmB,GAAmC,IAAI,OAAO,EAAE,CAAC;QAOzE,IAAK,KAA2B,CAAC,UAAU,IAAI,IAAI,EAAE;YACnD,KAAK,MAAM,OAAO,IAAI,kBAAkB,EAAE;gBACxC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;aACrD;SACF;IACH,CAAC;IAhBD,IAAW,CAAC,cAAc,CAAC;QACzB,OAAO,IAAI,CAAC,kBAAkB,CAAsB,CAAC;IACvD,CAAC;IAgBD,KAAK,CAAC,MAAM,CAAC,QAAe,EAAE,KAAkB;QAC9C,IAAI,KAAK,GAA0B,IAAI,CAAC;QAExC,IAAI,QAAQ,KAAK,KAAK,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,8BAA8B,QAAQ,YAAY,CAAC,CAAC;SACrE;QAED,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,KAAK,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC5C,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;SACJ;QAED,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;YAC1C,wEAAwE;YACxE,uEAAuE;YACvE,+CAA+C;YAC/C,IAAI,KAAK,IAAI,IAAI;gBACZ,IAAI,CAAC,YAAkC,CAAC,UAAU,IAAI,IAAI,EAAE;gBAC/D,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACtD;iBAAM;gBACL,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;aACvB;YAED,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;SAC5B;IACH,CAAC;IAED,MAAM;QACJ,MAAM,UAAU,GAA6B,KAAK,CAAC,MAAM,EAAE,CAAC;QAC5D,MAAM,EAAC,GAAG,EAAC,GAAG,IAAI,CAAC,YAAiC,CAAC;QAErD,IAAI,GAAG,IAAI,IAAI,EAAE;YACf,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC;SACtB;QAED,OAAO,UAA6B,CAAC;IACvC,CAAC;CACF;KApDS,iBAAiB","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ImageLoader, Texture as ThreeTexture} from 'three';\n\nimport {EmbeddedImage as GLTFEmbeddedImage, ExternalImage as GLTFExternalImage, Image as GLTFImage} from '../../gltf-2.0.js';\nimport {SerializedImage} from '../../protocol.js';\nimport {Image as ImageInterface} from '../api.js';\n\nimport {ModelGraft} from './model-graft.js';\nimport {$correlatedObjects, ThreeDOMElement} from './three-dom-element.js';\n\nconst loader = new ImageLoader();\n\nconst $threeTextures = Symbol('threeTextures');\nconst $bufferViewImages = Symbol('bufferViewImages');\n\n/**\n * Image facade implementation for Three.js textures\n */\nexport class Image extends ThreeDOMElement implements ImageInterface {\n  private get[$threeTextures]() {\n    return this[$correlatedObjects] as Set<ThreeTexture>;\n  }\n\n  private[$bufferViewImages]: WeakMap<ThreeTexture, unknown> = new WeakMap();\n\n  constructor(\n      graft: ModelGraft, image: GLTFImage,\n      correlatedTextures: Set<ThreeTexture>) {\n    super(graft, image, correlatedTextures);\n\n    if ((image as GLTFEmbeddedImage).bufferView != null) {\n      for (const texture of correlatedTextures) {\n        this[$bufferViewImages].set(texture, texture.image);\n      }\n    }\n  }\n\n  async mutate(property: 'uri', value: string|null) {\n    let image: HTMLImageElement|null = null;\n\n    if (property !== 'uri') {\n      throw new Error(`Cannot configure property \"${property}\" on Image`);\n    }\n\n    if (value != null) {\n      image = await new Promise((resolve, reject) => {\n        loader.load(value, resolve, undefined, reject);\n      });\n    }\n\n    for (const texture of this[$threeTextures]) {\n      // If the URI is set to null but the Image had an associated buffer view\n      // (this would happen if it started out as embedded), then fall back to\n      // the cached object URL created by GLTFLoader:\n      if (image == null &&\n          (this.sourceObject as GLTFEmbeddedImage).bufferView != null) {\n        texture.image = this[$bufferViewImages].get(texture);\n      } else {\n        texture.image = image;\n      }\n\n      texture.needsUpdate = true;\n    }\n  }\n\n  toJSON(): SerializedImage {\n    const serialized: Partial<SerializedImage> = super.toJSON();\n    const {uri} = this.sourceObject as GLTFExternalImage;\n\n    if (uri != null) {\n      serialized.uri = uri;\n    }\n\n    return serialized as SerializedImage;\n  }\n}\n"]}