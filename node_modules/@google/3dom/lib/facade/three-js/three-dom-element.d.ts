import { Material, Object3D, Texture } from 'three';
import { GLTF, GLTFElement } from '../../gltf-2.0.js';
import { SerializedThreeDOMElement } from '../../protocol.js';
import { ThreeDOMElement as ThreeDOMElementInterface } from '../api.js';
import { ModelGraft } from './model-graft.js';
export declare const $correlatedObjects: unique symbol;
export declare const $type: unique symbol;
export declare const $sourceObject: unique symbol;
declare const $graft: unique symbol;
declare const $id: unique symbol;
export declare type CorrelatedObjects = Set<Object3D> | Set<Material> | Set<Texture>;
/**
 * A SerializableThreeDOMElement is the common primitive of all scene graph
 * elements that have been facaded in the host execution context. It adds
 * a common interface to these elements in support of convenient
 * serializability.
 */
export declare class ThreeDOMElement implements ThreeDOMElementInterface {
    private [$graft];
    private [$sourceObject];
    private [$correlatedObjects];
    private [$id];
    constructor(graft: ModelGraft, element: GLTFElement | GLTF, correlatedObjects?: CorrelatedObjects | null);
    /**
     * The Model of provenance for this scene graph element.
     */
    get ownerModel(): import("./model.js").Model;
    /**
     * The unique ID that marks this element. In generally, an ID should only be
     * considered unique to the element in the context of its scene graph. These
     * IDs are not guaranteed to be stable across script executions.
     */
    get internalID(): number;
    /**
     * Some (but not all) scene graph elements may have an optional name. The
     * Object3D.prototype.name property is sometimes auto-generated by Three.js.
     * We only want to expose a name that is set in the source glTF, so Three.js
     * generated names are ignored.
     */
    get name(): string | null;
    /**
     * The backing Three.js scene graph construct for this element.
     */
    get correlatedObjects(): Set<Object3D> | Set<Material> | Set<Texture> | null;
    /**
     * The canonical GLTF or GLTFElement represented by this facade.
     */
    get sourceObject(): import("../../gltf-2.0.js").PerspectiveCamera | import("../../gltf-2.0.js").OrthographicCamera | import("../../gltf-2.0.js").Texture | import("../../gltf-2.0.js").PBRMetallicRoughness | import("../../gltf-2.0.js").Material | import("../../gltf-2.0.js").Mesh | import("../../gltf-2.0.js").Node | import("../../gltf-2.0.js").ExternalImage | import("../../gltf-2.0.js").EmbeddedImage | import("../../gltf-2.0.js").Scene | import("../../gltf-2.0.js").Accessor | import("../../gltf-2.0.js").Animation | GLTF;
    /**
     * Mutate a property of the scene graph element. Returns a promise that
     * resolves when the mutation has been successfully applied.
     */
    mutate(_property: string, _value: unknown): Promise<void>;
    /**
     * Serialize the element in order to share it with a worker context.
     */
    toJSON(): SerializedThreeDOMElement;
}
export {};
