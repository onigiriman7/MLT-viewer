import { Texture as ThreeTexture } from 'three';
import { MagFilter, MinFilter, Sampler as GLTFSampler, WrapMode } from '../../gltf-2.0.js';
import { SerializedSampler } from '../../protocol.js';
import { Sampler as SamplerInterface } from '../api.js';
import { ModelGraft } from './model-graft.js';
import { ThreeDOMElement } from './three-dom-element.js';
declare const $threeTextures: unique symbol;
/**
 * Sampler facade implementation for Three.js textures
 */
export declare class Sampler extends ThreeDOMElement implements SamplerInterface {
    private get [$threeTextures]();
    constructor(graft: ModelGraft, sampler: GLTFSampler, correlatedTextures: Set<ThreeTexture>);
    mutate<P extends 'minFilter' | 'magFilter' | 'wrapS' | 'wrapT'>(property: P, value: MinFilter | MagFilter | WrapMode | null): Promise<void>;
    toJSON(): SerializedSampler;
}
export {};
