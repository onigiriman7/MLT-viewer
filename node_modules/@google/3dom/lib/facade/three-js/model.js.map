{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../src/facade/three-js/model.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;AAKH,OAAO,EAAC,eAAe,EAAC,MAAM,oBAAoB,CAAC;AAInD,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEvC,OAAO,EAAC,eAAe,EAAC,MAAM,wBAAwB,CAAC;AAGvD,MAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AACrC,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AAEvC;;;;GAIG;AACH,MAAM,OAAO,KAAM,SAAQ,eAAe;IAIxC,YACI,KAAiB,EAAE,QAAgB,EACnC,oBAA0C;QAC5C,KAAK,CAAC,KAAK,EAAE,oBAAoB,CAAC,IAAI,CAAC,CAAC;QANnC,QAAW,GAAG,EAAE,CAAC;QACjB,QAAY,GAAoB,EAAE,CAAC;QAOxC,IAAI,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;QAE3B,MAAM,OAAO,GAAG,IAAI,eAAe,CAAC;YAClC,QAAQ,EAAE,CAAC,QAAQ,EAAE,EAAE;gBACrB,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAC9B,KAAK,EACL,QAAQ,EACR,oBAAoB,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CACnB,CAAC,CAAC,CAAC;YACtC,CAAC;SACF,CAAC,CAAC;QAEH,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC,IAAI,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;IAC3D,CAAC;IAED;;;;;;;OAOG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM;QACJ,MAAM,UAAU,GAA6B,KAAK,CAAC,MAAM,EAAE,CAAC;QAE5D,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;QACtC,UAAU,CAAC,SAAS;YAChB,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAE1D,OAAO,UAA6B,CAAC;IACvC,CAAC;CACF;KA5CS,SAAS,OACT,UAAU","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MeshStandardMaterial} from 'three';\n\nimport {SerializedModel} from '../../protocol.js';\nimport {GLTFTreeVisitor} from '../../utilities.js';\nimport {Model as ModelInterface} from '../api.js';\n\nimport {CorrelatedSceneGraph} from './correlated-scene-graph.js';\nimport {Material} from './material.js';\nimport {ModelGraft} from './model-graft.js';\nimport {ThreeDOMElement} from './three-dom-element.js';\n\n\nconst $modelUri = Symbol('modelUri');\nconst $materials = Symbol('materials');\n\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\nexport class Model extends ThreeDOMElement implements ModelInterface {\n  private[$modelUri] = '';\n  private[$materials]: Array<Material> = [];\n\n  constructor(\n      graft: ModelGraft, modelUri: string,\n      correlatedSceneGraph: CorrelatedSceneGraph) {\n    super(graft, correlatedSceneGraph.gltf);\n\n    this[$modelUri] = modelUri;\n\n    const visitor = new GLTFTreeVisitor({\n      material: (material) => {\n        this[$materials].push(new Material(\n            graft,\n            material,\n            correlatedSceneGraph.gltfElementMap.get(material) as\n                Set<MeshStandardMaterial>));\n      }\n    });\n\n    visitor.visit(correlatedSceneGraph.gltf, {sparse: true});\n  }\n\n  /**\n   * A flat list of all unique materials found in this scene graph. Materials\n   * are listed in the order they appear during pre-order, depth-first traveral\n   * of the scene graph.\n   *\n   * TODO(#1003): How do we handle non-active scenes?\n   * TODO(#1002): Desctibe and enforce traversal order\n   */\n  get materials() {\n    return this[$materials];\n  }\n\n  toJSON(): SerializedModel {\n    const serialized: Partial<SerializedModel> = super.toJSON();\n\n    serialized.modelUri = this[$modelUri];\n    serialized.materials =\n        this[$materials].map((material) => material.toJSON());\n\n    return serialized as SerializedModel;\n  }\n}\n"]}