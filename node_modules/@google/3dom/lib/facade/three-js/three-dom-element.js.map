{"version":3,"file":"three-dom-element.js","sourceRoot":"","sources":["../../../src/facade/three-js/three-dom-element.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;AAMH,OAAO,EAAC,kBAAkB,EAAC,MAAM,oBAAoB,CAAC;AAKtD,MAAM,CAAC,MAAM,kBAAkB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAC9D,MAAM,CAAC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AACpC,MAAM,CAAC,MAAM,aAAa,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;AAEpD,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;AAC/B,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;AAIzB;;;;;GAKG;AACH,MAAM,OAAO,eAAe;IAO1B,YACI,KAAiB,EAAE,OAAyB,EAC5C,oBAA4C,IAAI;QAJ7C,QAAK,GAAW,kBAAkB,EAAE,CAAC;QAK1C,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC;QAC9B,IAAI,CAAC,kBAAkB,CAAC,GAAG,iBAAiB,CAAC;QAE7C,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACH,IAAI,IAAI;QACN,OAAQ,IAAI,CAAC,aAAa,CAAgC,CAAC,IAAI,IAAI,IAAI,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,SAAiB,EAAE,MAAe;QACvC,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,MAAM,UAAU,GAA8B,EAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,EAAC,CAAC;QAC9D,MAAM,EAAC,IAAI,EAAC,GAAG,IAAI,CAAC;QACpB,IAAI,IAAI,IAAI,IAAI,EAAE;YAChB,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;SACxB;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;KAvES,GAAG","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Material, Object3D, Texture} from 'three';\n\nimport {GLTF, GLTFElement} from '../../gltf-2.0.js';\nimport {SerializedThreeDOMElement} from '../../protocol.js';\nimport {getLocallyUniqueId} from '../../utilities.js';\nimport {ThreeDOMElement as ThreeDOMElementInterface} from '../api.js';\n\nimport {ModelGraft} from './model-graft.js';\n\nexport const $correlatedObjects = Symbol('correlatedObjects');\nexport const $type = Symbol('type');\nexport const $sourceObject = Symbol('sourceObject');\n\nconst $graft = Symbol('graft');\nconst $id = Symbol('id');\n\nexport type CorrelatedObjects = Set<Object3D>|Set<Material>|Set<Texture>;\n\n/**\n * A SerializableThreeDOMElement is the common primitive of all scene graph\n * elements that have been facaded in the host execution context. It adds\n * a common interface to these elements in support of convenient\n * serializability.\n */\nexport class ThreeDOMElement implements ThreeDOMElementInterface {\n  private[$graft]: ModelGraft;\n  private[$sourceObject]: GLTFElement|GLTF;\n  private[$correlatedObjects]: CorrelatedObjects|null;\n\n  private[$id]: number = getLocallyUniqueId();\n\n  constructor(\n      graft: ModelGraft, element: GLTFElement|GLTF,\n      correlatedObjects: CorrelatedObjects|null = null) {\n    this[$graft] = graft;\n    this[$sourceObject] = element;\n    this[$correlatedObjects] = correlatedObjects;\n\n    graft.adopt(this);\n  }\n\n  /**\n   * The Model of provenance for this scene graph element.\n   */\n  get ownerModel() {\n    return this[$graft].model;\n  }\n\n  /**\n   * The unique ID that marks this element. In generally, an ID should only be\n   * considered unique to the element in the context of its scene graph. These\n   * IDs are not guaranteed to be stable across script executions.\n   */\n  get internalID() {\n    return this[$id];\n  }\n\n  /**\n   * Some (but not all) scene graph elements may have an optional name. The\n   * Object3D.prototype.name property is sometimes auto-generated by Three.js.\n   * We only want to expose a name that is set in the source glTF, so Three.js\n   * generated names are ignored.\n   */\n  get name() {\n    return (this[$sourceObject] as unknown as {name?: string}).name || null;\n  }\n\n  /**\n   * The backing Three.js scene graph construct for this element.\n   */\n  get correlatedObjects() {\n    return this[$correlatedObjects];\n  }\n\n  /**\n   * The canonical GLTF or GLTFElement represented by this facade.\n   */\n  get sourceObject() {\n    return this[$sourceObject];\n  }\n\n  /**\n   * Mutate a property of the scene graph element. Returns a promise that\n   * resolves when the mutation has been successfully applied.\n   */\n  mutate(_property: string, _value: unknown): Promise<void> {\n    throw new Error('Mutation not implemented for this element');\n  }\n\n  /**\n   * Serialize the element in order to share it with a worker context.\n   */\n  toJSON(): SerializedThreeDOMElement {\n    const serialized: SerializedThreeDOMElement = {id: this[$id]};\n    const {name} = this;\n    if (name != null) {\n      serialized.name = name;\n    }\n    return serialized;\n  }\n}\n"]}