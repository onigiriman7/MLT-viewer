{"version":3,"file":"sampler.js","sourceRoot":"","sources":["../../../src/facade/three-js/sampler.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Texture as ThreeTexture} from 'three';\n\nimport {MagFilter, MinFilter, Sampler as GLTFSampler, WrapMode} from '../../gltf-2.0.js';\nimport {SerializedSampler} from '../../protocol.js';\nimport {Sampler as SamplerInterface} from '../api.js';\n\nimport {ModelGraft} from './model-graft.js';\nimport {$correlatedObjects, ThreeDOMElement} from './three-dom-element.js';\n\nconst isMinFilter = (() => {\n  const minFilterValues: Array<MinFilter> =\n      [9728, 9729, 9984, 9985, 9986, 9987];\n  return (value: unknown): value is MinFilter =>\n             minFilterValues.indexOf(value as MinFilter) > -1;\n})();\n\nconst isMagFilter = (() => {\n  const magFilterValues: Array<MagFilter> = [9728, 9729];\n  return (value: unknown): value is MagFilter =>\n             magFilterValues.indexOf(value as MagFilter) > -1;\n})();\n\nconst isWrapMode = (() => {\n  const wrapModes: Array<WrapMode> = [33071, 33648, 10497];\n  return (value: unknown): value is WrapMode =>\n             wrapModes.indexOf(value as WrapMode) > -1;\n})();\n\nconst isValidSamplerValue = <P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'>(\n    property: P, value: unknown): value is GLTFSampler[P] => {\n  switch (property) {\n    case 'minFilter':\n      return isMinFilter(value);\n    case 'magFilter':\n      return isMagFilter(value);\n    case 'wrapS':\n    case 'wrapT':\n      return isWrapMode(value);\n    default:\n      throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n  }\n};\n\n// These defaults represent a convergence of glTF defaults for wrap mode and\n// Three.js defaults for filters. Per glTF 2.0 spec, a renderer may choose its\n// own defaults for filters.\n// @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-sampler\n// @see https://threejs.org/docs/#api/en/textures/Texture\nconst defaultValues:\n    {[k in 'minFilter' | 'magFilter' | 'wrapS' | 'wrapT']: number} = {\n      minFilter: 9987,\n      magFilter: 9729,\n      wrapS: 10497,\n      wrapT: 10497,\n    };\n\nconst $threeTextures = Symbol('threeTextures');\n\n/**\n * Sampler facade implementation for Three.js textures\n */\nexport class Sampler extends ThreeDOMElement implements SamplerInterface {\n  private get[$threeTextures]() {\n    return this[$correlatedObjects] as Set<ThreeTexture>;\n  }\n\n  constructor(\n      graft: ModelGraft, sampler: GLTFSampler,\n      correlatedTextures: Set<ThreeTexture>) {\n    super(graft, sampler, correlatedTextures);\n  }\n\n  async mutate<P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'>(\n      property: P, value: MinFilter|MagFilter|WrapMode|null) {\n    const sampler = this.sourceObject as GLTFSampler;\n\n    if (value != null) {\n      if (isValidSamplerValue(property, value)) {\n        sampler[property] = value;\n\n        for (const texture of this[$threeTextures]) {\n          texture[property] = value;\n          texture.needsUpdate = true;\n        }\n      }\n    } else if (property in sampler) {\n      delete sampler[property];\n\n      for (const texture of this[$threeTextures]) {\n        texture[property] = defaultValues[property];\n        texture.needsUpdate = true;\n      }\n    }\n  }\n\n  toJSON(): SerializedSampler {\n    const serialized: Partial<SerializedSampler> = super.toJSON();\n    const {minFilter, magFilter, wrapS, wrapT} =\n        this.sourceObject as GLTFSampler;\n\n    if (minFilter != null) {\n      serialized.minFilter = minFilter;\n    }\n\n    if (magFilter != null) {\n      serialized.magFilter = magFilter;\n    }\n\n    if (wrapS !== 10497) {\n      serialized.wrapS = wrapS;\n    }\n\n    if (wrapT !== 10497) {\n      serialized.wrapT = wrapT;\n    }\n\n    return serialized as SerializedSampler;\n  }\n}\n"]}